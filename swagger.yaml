swagger: '2.0'
info:
  description: User Profile
  version: 1.0.0
  title: User Profile
  # put the contact info for your development or API team
  contact:
    email: you@your-company.com

  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html




paths:
  /profile/{uid}:
    get:
      summary: get user profile
      produces:
      - application/json
      parameters:
      - in: path
        name: uid
        description: id of user
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/UserProfile'
        400:
          description: invalid uid supplied
        404:
          description: userProfile not found
    delete:
      summary: delete user profile
      produces:
      - application/json
      parameters:
      - in: path
        name: uid
        description: id of user
        required: true
        type: string
      responses:
        200:
          description: successful operation
        400:
          description: invalid uid supplied
        404:
          description: userProfile not found
    
  /profile/create:
    post:
      summary: create user profile
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: "body"
        name: "body"
        description: user profile object that want to create
        required: true
        schema:
           $ref: '#/definitions/UserProfile'
      responses:
        201:
          description: successful operation
          schema:
            $ref: '#/definitions/UserProfile'
        400:
          description: invalid input
  /profile/edit:
    patch:
      summary: edit user profile
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: data
        description: user profile object that want to edit
        required: true
        schema:
           $ref: '#/definitions/UserProfile'
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/UserProfile'
        400:
          description: invalid input
        404:
          description: userProfile not found
          
    
    
  /profile/picture/{uid}:
    get:
      summary: get user profile picture
      consumes:
      - multipart/form-data
      produces:
      - application/json
      parameters:
      - in: path
        name: uid
        description: id of user
        required: true
        type: string
      responses:
        201:
          description: successful operation
          schema:
            $ref: '#/definitions/UserPicture'
        400:
          description: invalid input
    post:
      summary: create user profile picture
      consumes:
      - multipart/form-data
      produces:
      - application/json
      parameters:
      - in: path
        name: uid
        description: id of user
        required: true
        type: string
      - in: formData
        name: image
        description: user profile picture (image)
        required: true
        type: file
      responses:
        201:
          description: successful operation
          schema:
            $ref: '#/definitions/UserPicture'
        400:
          description: invalid input
    patch:
      summary: edit user profile picture
      consumes:
      - multipart/form-data
      produces:
      - application/json
      parameters:
      - in: path
        name: uid
        description: id of user
        required: true
        type: string
      - in: formData
        name: image
        description: user profile picture (image)
        required: true
        type: file
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/UserPicture'
        400:
          description: invalid input
        404:
          description: userPicture not found
    
    delete:
      summary: delete user profile picture
      consumes:
      - multipart/form-data
      produces:
      - application/json
      parameters:
      - in: path
        name: uid
        description: id of user
        required: true
        type: string
      responses:
        201:
          description: successful operation
        400:
          description: invalid input
      
    
definitions:
  UserProfile:
    type: object
    properties:
      uid:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      dateOfBirth:
        type: object
        properties:
          year:
            type: string
          month:
            type: string
          day:
            type: string
      age:
        type: number
      address:
        type: string
      phoneNumber:
        type: string
      gender:
        type: string
        enum:
        - "male"
        - "female"
        - "other"
  UserPicture:
    type: object
    properties:
      imageUrl:
        type: string
# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
basePath: /peetck/UserProfile/1.0.0
schemes:
 - https